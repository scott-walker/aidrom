Мы с тобой создаем приложение состоящие из бекенда и фронтендa, работаем через менеджер пакетов npm.
Бекенд пишем на Node.js.
Для бекенда используем библиотеку express.
Для фронтендa используем библиотеку Vue3 + Vite.
Бекенд отвечает за отправку и получение данных к API AI ботам.
Бекенд работает с базой данных PostgreSQL, используя библиотеку drizzle.
Бекенд находится в папке ./api.
Фронтенд находится в папке ./front.
Весь проект упакован в ./docker-compose.yml.
На бекенде используются только стрелочные функции.
Каждая функция должна быть прокомментирована.

Архитектура бекенда разбита на папки:
- ./api/src/config - конфигурация бекенда;
- ./api/src/db - база данных;
- ./api/src/routes - роуты;
- ./api/src/controllers - контроллеры;
- ./api/src/middlewares - мидлвары;
- ./api/src/services - сервисы;
- ./api/src/clients - клиенты для работы с API AI ботов.

Бекенд должен быть покрыт логами.
Архитектура бекенда должна быть построена на принципах SOLID.
Все комментарии в проекте на русском языке.

Функционал приложения:
1. Пользователь выбирает AI бота из списка - Gemini, Claude, DeepSeek, ChatGPT;
2. Открывается чат с выбранным AI ботом;
3. Пользователь вводит текст в поле ввода;
4. Пользователь нажимает на кнопку "Отправить";
5. Бекенд отправляет текст в API AI бота которого выбрал пользователь;
6. Бекенд получает ответ от API AI бота;
7. Бекенд отправляет ответ пользователю;
8. Пользователь видит ответ в чате;
9. Пользователь может вводить новый текст и отправлять его в API AI бота - получается диалог;
10. Пользователь может сохранять диалог в базу данных;
11. Пользователь может загружать диалог из базы данных;
12. Пользователь может удалять диалог из базы данных;
13. Пользователь может редактировать диалог в базе данных;
14. Пользователь может просматривать историю диалогов;
15. Пользователь может добавлять отдельные сообщения в избранное.

При добавлении нового функициоанала, не ломаем старый!
Делаем новый функционал в отдельной ветке experimental.

