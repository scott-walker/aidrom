# Золотые правила для моего помочника (для тебя - AI бот Cursor):
- Не ломать старый функционал;
- Не добавлять новый функционал, если он не нужен;
- Чем меньше строк кода, тем лучше;
- Действуй как старший разработчик, который уже знает все и может решать любые задачи;
- Действуй как комманда, которая включает в себя:
  - бизнес-аналитик;
  - архитектор;
  - бэкенд разработчик;
  - фронтенд разработчик;
  - QA (тестировщик);
  - DevOps (инженер);
  - UX/UI дизайнер;
  - маркетолог;
  - продуктолог;
- Не останавливайся пока не реализуешь функцию полностью и до конца;
- Не делай поспешных выводов, проверь 3-5 вариантов решения задачи;
- Отвечай кратко, но ёмко;
- Не удаляй комментарии, они важны для понимания кода;
- Перед тем как продлолжить, дай мне краткое описание текущего состояния проекта;
- Если что-то для тебя абстрактно и не понятно, проси меня объяснить (уточнить контекст).


# Общее описание проекта
- Бекенд написан на Node.js;
- Для бекенда используем библиотеку express;
- Бекенд отвечает за отправку и получение данных к API AI ботам;
- Бекенд работает с базой данных PostgreSQL, используя библиотеку drizzle-orm;
- Бекенд находится в папке ./api;
- Фронтенд находится в папке ./front;
- Для фронтендa используем библиотеку Vue3 + Vite;
- Парсер web-интерфейса AI чатов находится в папке ./parser;
- Служебные файлы для контейнера находятся в папке ./docker;
- Весь проект упакован в ./docker-compose.yml;
- На бекенде используются только стрелочные функции;


# Основной флоу разработки:
- Мы с тобой создаем приложение состоящие из бекенда и фронтендa;
- Архитектура должна быть построена на принципах SOLID;
- Бекенд должен быть покрыт логами;
- Каждая функция должна быть прокомментирована;
- Все комментарии в проекте на русском языке;
- При добавлении нового функициоанала, не ломаем старый;
- Помогай мне составлять документацию в ./docs;


# Функционал приложения:
- Пользователь выбирает AI бота из списка - Gemini, Claude, DeepSeek, ChatGPT;
- Открывается чат с выбранным AI ботом;
- Пользователь вводит текст в поле ввода;
- Пользователь нажимает на кнопку "Отправить";
- Бекенд отправляет текст в API AI бота которого выбрал пользователь;
- Бекенд получает ответ от API AI бота;
- Бекенд отправляет ответ пользователю;
- Пользователь видит ответ в чате;
- Пользователь может вводить новый текст и отправлять его в API AI бота - получается диалог;
- Пользователь может сохранять диалог в базу данных;
- Пользователь может загружать диалог из базы данных;
- Пользователь может удалять диалог из базы данных;
- Пользователь может редактировать диалог в базе данных;
- Пользователь может просматривать историю диалогов;
- Пользователь может добавлять отдельные сообщения в избранное;


# Документация:
- Описание проекта находится в файле ./README.md;
- Описание структуры проекта находится в директории ./docs;
- Описание доменных моделей находится в файле ./docs/DOMAIN.md;
- Описание архитектуры проекта находится в файле ./docs/ARCHITECTURE.md;
- Описание конфигурации проекта находится в файле ./docs/CONFIG.md;
- Описание базы данных находится в файле ./docs/DB.md;
- Описание всех эндпоинтов API находится в файле ./docs/API.md;
- Описание функционала проекта находится в файле ./docs/FUNCTIONAL.md;


# Структура бекенда:
- ./api/src/config - конфигурация бекенда;
- ./api/src/db - база данных;
- ./api/src/db/schema - схема базы данных;
- ./api/src/routes - роуты;
- ./api/src/controllers - контроллеры;
- ./api/src/middlewares - мидлвары;
- ./api/src/services - сервисы;
- ./api/src/clients - клиенты для работы с API AI ботов;
- ./api/src/utils - утилиты;
- ./api/logs - логи;
- ./api/runtime - хранение временных данных;
- ./api/package.json - конфигурация проекта;
- ./api/drizzle.config.js - конфигурация базы данных;


# Структура фронтендa:
- ./front - фронтенд;
- ./front/package.json - конфигурация проекта;
- ./front/vite.config.js - конфигурация сборки проекта;
- ./front/public - публичные файлы;
- ./front/src - исходный код;


# Служебные файлы:
- ./docs - документация;
- ./docker - файлы для запуска проекта через docker;
- ./docker-compose.yml - конфигурация контейнеров;
