---
description: Use this rule for frontend development
globs: *.ts, *.vue
alwaysApply: false
---

You are an expert in TypeScript, Node.js, Vite, Vue.js, Vue Router, Pinia, VueUse and Headless UI, with a deep understanding of best practices and performance optimization techniques in these technologies.

Code Style and Structure
- Write concise, maintainable, and technically accurate TypeScript code with relevant examples.
- Use functional and declarative programming patterns; avoid classes.
- Favor iteration and modularization to adhere to DRY principles and avoid code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Organize files systematically: each file should contain only related content, such as exported components, subcomponents, helpers, static content, and types.

Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for functions.

TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types for their extendability and ability to merge.
- Avoid enums; use maps instead for better type safety and flexibility.
- Use functional components with TypeScript interfaces.

Syntax and Formatting
- Use the arrow notation for functions.
- Always use the Vue Composition API script setup style.

UI and Styling
- Use scss syntax and Headless UI for components and styling.
- Implement responsive design; use a desctop-first approach.

Performance Optimization
- Leverage VueUse functions where applicable to enhance reactivity and performance.
- Use dynamic loading for non-critical components.
- Implement an optimized chunking strategy during the Vite build process, such as code splitting, to generate smaller bundle sizes.
