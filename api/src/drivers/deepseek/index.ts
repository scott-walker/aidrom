import { createRestClient } from "@utils/api"
import { Driver, DriverRequest, DriverParamsConfig } from "../types"
import { DeepseekDriverConfig, DeepseekDriverModel, DeepseekDriverRequest, DeepseekDriverResponse } from "./types"
import { createApiLogger } from "@utils/logger"
import { ISender, SenderEvents, createSender } from "@utils/sender"

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ Deepseek
 * @namespace Drivers.Deepseek.createDeepseekDriver
 * @param {DeepseekDriverConfig} config –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
 */
export const createDeepseekDriver = (config: DeepseekDriverConfig): Driver => {
  const logger = createApiLogger("DeepseekDriver")

  const restClient = createRestClient({
    baseUrl: config.baseUrl,
    authKey: config.apiKey
  })

  const driver: Driver = {
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—Ä–∞–π–≤–µ—Ä–µ Deepseek
     * @namespace Drivers.Deepseek.getInfo
     */
    getInfo: async () => {
      const { data } = await restClient.get("user/balance")

      return {
        name: "deepseek",
        description: "–î—Ä–∞–π–≤–µ—Ä –¥–ª—è Deepseek",
        account: data
      }
    },

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –∫ –¥—Ä–∞–π–≤–µ—Ä—É
     * @namespace Drivers.Deepseek.getParamsConfig
     */
    getParamsConfig: async (): Promise<DriverParamsConfig> => {
      // model: await restClient.get("models").then(res => res.data.map((item: any) => item.id)),

      return {
        meta: {},
        params: [
          {
            name: "model",
            label: "–ú–æ–¥–µ–ª—å",
            type: "select",
            options: [DeepseekDriverModel.DEEPSEEK_CHAT, DeepseekDriverModel.DEEPSEEK_REASONER]
          },
          {
            name: "stream",
            label: "–†–µ–∂–∏–º –ø–æ—Ç–æ–∫–∞",
            type: "toggle"
          },
          {
            name: "maxTokens",
            label: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤",
            type: "range",
            step: 1,
            min: 1,
            max: 4000
          },
          {
            name: "temperature",
            label: "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
            type: "range",
            step: 0.1,
            min: 0,
            max: 2
          },
          {
            name: "topP",
            label: "Top P",
            type: "range",
            step: 0.1,
            min: 0.1,
            max: 1
          },
          {
            name: "frequencyPenalty",
            label: "–ß–∞—Å—Ç–æ—Ç–Ω–∞—è —à—Ç—Ä–∞—Ñ–Ω–æ—Å—Ç—å",
            type: "range",
            step: 0.1,
            min: -2,
            max: 2
          },
          {
            name: "presencePenalty",
            label: "–®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ",
            type: "range",
            step: 0.1,
            min: -2,
            max: 2
          }
        ]
      }
    },

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Deepseek
     * @namespace Drivers.Deepseek.sendRequest
     */
    sendRequest(request: DriverRequest): ISender {
      logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API", { action: "sendRequest", request })

      return createSender(async (sender: ISender) => {
        logger.info("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞", { action: "sendRequest" })

        try {
          const asStream = true // request.stream as boolean

          // –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API
          const driverRequest: DeepseekDriverRequest = {
            model: request.model as DeepseekDriverModel,
            messages: request.messages,
            frequency_penalty: request.frequencyPenalty as number,
            presence_penalty: request.presencePenalty as number,
            max_tokens: request.maxTokens as number,
            temperature: request.temperature as number,
            top_p: request.topP as number,
            stream: asStream
          }

          let content = ""
          let data = {} as DeepseekDriverResponse
          const response = await restClient.post("chat/completions", driverRequest, {
            responseType: asStream ? "stream" : "json"
          })

          // –≠–º–º–∏—Ç–µ—Ç—å —Å–æ–±—ã—Ç–∏–µ "—Å—Ç–∞—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"
          sender.emit(SenderEvents.START, {})

          if (asStream) {
            logger.info("–ü–æ–ª—É—á–µ–Ω –ø–æ—Ç–æ–∫ –æ—Ç–≤–µ—Ç–∞", { action: "sendRequest" })

            let buffer = ""

            for await (const chunk of response.data) {
              // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Buffer –≤ —Å—Ç—Ä–æ–∫—É
              const chunkStr = chunk.toString()
              buffer += chunkStr

              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–≤–æ–π–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
              const lines = buffer.split("\n\n")
              buffer = lines.pop() || "" // –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –±—É—Ñ–µ—Ä–µ

              for (const line of lines) {
                if (line.trim() === "") continue
                if (line.startsWith("data: [DONE]")) {
                  // –ö–æ–Ω–µ—Ü —Å—Ç—Ä–∏–º–∞
                  break
                }
                if (line.startsWith("data: ")) {
                  try {
                    const jsonStr = line.slice(6) // –£–±–∏—Ä–∞–µ–º "data: "
                    const chunkData = JSON.parse(jsonStr)

                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ —á–∞–Ω–∫–∞
                    const deltaContent = chunkData.choices?.[0]?.delta?.content
                    if (deltaContent) {
                      content += deltaContent
                      sender.emit(SenderEvents.CHUNK, { content })
                    }

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    if (chunkData.usage) {
                      data = chunkData
                    }
                  } catch (parseError) {
                    logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —á–∞–Ω–∫–∞", { parseError, line })
                  }
                }
              }
            }
          } else {
            logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç", { action: "sendRequest" })

            content = response.data.choices[0].message.content
            data = response.data
          }

          sender.emit(SenderEvents.COMPLETE, {
            providerRequestId: data?.id,
            requestParams: driverRequest,
            responseData: data,
            requestTokens: data?.usage?.prompt_tokens,
            responseTokens: data?.usage?.completion_tokens,
            content
          })
        } catch (error) {
          logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", { action: "sendRequest", error })

          sender.emit(SenderEvents.ERROR, { error })
        }
      })
    }
  }

  logger.info("–î—Ä–∞–π–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

  return driver
}
