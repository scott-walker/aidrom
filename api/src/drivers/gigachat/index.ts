import https from "https"
import { GigaChat, detectImage } from "gigachat"
import { createApiLogger } from "@utils/logger"
import * as imager from "@utils/imager"
import { Driver, DriverRequest, DriverParamsConfig, DriverResponse } from "../types"
import { GigachatDriverConfig, GigachatDriverRequest } from "./types"

/**
 * –û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è Gigachat
 * @namespace Drivers.Gigachat.SCOPE
 */
const SCOPE = "GIGACHAT_API_PERS"

/**
 * –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
 * @namespace Drivers.Gigachat.REQUEST_TIMEOUT
 */
const REQUEST_TIMEOUT = 60

/**
 * –°–æ–∑–¥–∞–µ—Ç –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è Gigachat
 * https://developers.sber.ru/studio/workspaces/01995465-af06-79a6-86ed-f4c711d7e330/gigachat-api/projects/01995465-f1dd-77e4-bc6c-8d4391f60ac5/settings
 * @param {GigachatDriverConfig} config –ö–æ–Ω—Ñ–∏–≥ –¥—Ä–∞–π–≤–µ—Ä–∞
 */
export const createGigachatDriver = (config: GigachatDriverConfig): Driver => {
  const logger = createApiLogger("GigachatDriver")

  const giga = new GigaChat({
    credentials: config.authorizationKey,
    scope: SCOPE,
    timeout: REQUEST_TIMEOUT,
    httpsAgent: new https.Agent({
      rejectUnauthorized: false // ‚ö†Ô∏è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç self-signed cert
    })
  })

  const driver: Driver = {
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—Ä–∞–π–≤–µ—Ä–µ Gigachat
     * @namespace Drivers.Gigachat.getInfo
     */
    getInfo: async () => ({
      name: "gigachat",
      description: "–î—Ä–∞–π–≤–µ—Ä –¥–ª—è Gigachat",
      account: await giga.balance()
    }),

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –∫ –¥—Ä–∞–π–≤–µ—Ä—É
     * @namespace Drivers.Gigachat.getParamsConfig
     */
    getParamsConfig: async (): Promise<DriverParamsConfig> => {
      const { data } = await giga.getModels()

      return {
        meta: {},
        params: [
          {
            name: "model",
            label: "–ú–æ–¥–µ–ª—å",
            type: "select",
            options: data.map((item: any) => item.id)
          },
          {
            name: "maxTokens",
            label: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤",
            type: "range",
            step: 1,
            min: 10,
            max: 4000
          },
          {
            name: "temperature",
            label: "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
            type: "range",
            step: 0.1,
            min: 0,
            max: 2
          },
          {
            name: "topP",
            label: "Top P",
            type: "range",
            step: 0.1,
            min: 0.1,
            max: 1
          },
          {
            name: "repetitionPenalty",
            label: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Å–ª–æ–≤",
            type: "range",
            step: 0.1,
            min: 0,
            max: 2
          }
        ]
      }
    },

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Gigachat –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @namespace Drivers.Gigachat.sendGenerateImage
     */
    sendRequest: async (request: DriverRequest): Promise<DriverResponse> => {
      logger.info("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞", { action: "sendRequest", request })

      try {
        const driverRequest: GigachatDriverRequest = {
          messages: request.messages,
          model: request.params.model as string,
          temperature: request.params.temperature as number,
          top_p: request.params.topP as number,
          max_tokens: request.params.maxTokens as number,
          repetition_penalty: request.params.repetitionPenalty as number,
          function_call: "auto"
        }

        const data = await giga.chat(driverRequest)
        let content = data.choices[0]?.message.content ?? ""

        logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç", { action: "sendRequest", data })

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
        const detectedImage = detectImage(content)

        // –ï—Å–ª–∏ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (detectedImage) {
          logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", { action: "sendRequest" })

          const image = await giga.getImage(detectedImage.uuid)
          const fileName = `${detectedImage.uuid}.jpeg`
          content = content.replace(detectedImage.uuid, `/static/${fileName}`)

          const filePath = imager.save(fileName, image.content)
          logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª", { action: "sendRequest", filePath })
        }

        return {
          content,
          providerRequestId: data.xHeaders.xRequestID,
          requestParams: driverRequest,
          responseData: data,
          requestTokens: data.usage.prompt_tokens,
          responseTokens: data.usage.completion_tokens
        }
      } catch (error) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", { action: "sendRequest", error })

        throw error
      }
    }
  }

  logger.info("–î—Ä–∞–π–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

  return driver
}
