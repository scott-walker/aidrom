import { createApiLogger } from "@utils/logger"
import { Driver, DriverRequest } from "../types"
import { DummyDriverConfig } from "./types"
import { ISender, SenderEvents } from "@utils/sender"

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ "–∑–∞–≥–ª—É—à–∫–∞" (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 * @namespace Drivers.Dummy.createDummyDriver
 * @param {DummyDriverConfig} config –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
 */
export const createDummyDriver = (config: DummyDriverConfig): Driver => {
  const logger = createApiLogger("DummyDriver")

  const driver: Driver = {
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—Ä–∞–π–≤–µ—Ä–µ "–∑–∞–≥–ª—É—à–∫–∞"
     * @namespace Drivers.Dummy.getInfo
     */
    getInfo: async () => ({
      name: "dummy",
      description: "–î—Ä–∞–π–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
      version: "1.0.0",
      balance: 0
    }),

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –∫ –¥—Ä–∞–π–≤–µ—Ä—É "–∑–∞–≥–ª—É—à–∫–∞"
     * @namespace Drivers.Dummy.getModels
     */
    getParamsConfig: async () => ({
      meta: {},
      params: [
        {
          name: "dummyModel",
          label: "–ú–æ–¥–µ–ª—å",
          type: "select",
          options: ["dummy1", "dummy2"]
        },
        {
          name: "dummyMaxTokens",
          label: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤",
          type: "range",
          min: 0,
          max: 100,
          step: 1
        },
        {
          name: "dummyTemperature",
          label: "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (—É—Ä–∞-—É—Ä–∞)",
          type: "range",
          min: 0,
          max: 100,
          step: 0.1
        }
      ]
    }),

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –¥—Ä–∞–π–≤–µ—Ä–∞ "–∑–∞–≥–ª—É—à–∫–∞"
     * @namespace Drivers.Dummy.sendRequest
     */
    async sendRequest(sender: ISender, request: DriverRequest): Promise<void> {
      logger.info("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞", { action: "sendRequest", request })

      await new Promise(resolve => setTimeout(resolve, 100))

      try {
        const responseContent = "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! Next.js ‚Äî —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö"

        if (Math.random() > 0.7) {
          throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        }

        let content = ""
        for (const chunk of responseContent.split("")) {
          content += chunk
          sender.emit(SenderEvents.PUSH_CONTENT, { content })

          await new Promise(resolve => setTimeout(resolve, 100))
        }

        sender.emit(SenderEvents.DRIVER_SEND_COMPLETE, {
          providerRequestId: "dummy",
          content,
          requestParams: request,
          responseData: {
            request,
            config
          },
          requestTokens: 0,
          responseTokens: 0
        })

        logger.info("üöÄ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç", { action: "sendRequest" })
      } catch (error) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", { action: "sendRequest", error: error.message })

        sender.emit(SenderEvents.DRIVER_SEND_ERROR, { error, request })
      }
    }
  }

  logger.info("–î—Ä–∞–π–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

  return driver
}
