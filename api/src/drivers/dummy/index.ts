import { createApiLogger } from "@utils/logger"
import { Driver, DriverRequest, DriverResponse } from "../types"
import { DummyDriverConfig } from "./types"

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ "–∑–∞–≥–ª—É—à–∫–∞" (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 * @namespace Drivers.Dummy.createDummyDriver
 * @param {DummyDriverConfig} config –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
 */
export const createDummyDriver = (config: DummyDriverConfig): Driver => {
  const logger = createApiLogger("DummyDriver")

  const driver: Driver = {
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –∫ –¥—Ä–∞–π–≤–µ—Ä—É "–∑–∞–≥–ª—É—à–∫–∞"
     * @namespace Drivers.Dummy.getModels
     */
    getParamsConfig: async () => ({
      meta: {},
      params: [
        {
          name: "dummyModel",
          label: "–ú–æ–¥–µ–ª—å",
          type: "select",
          options: ["dummy1", "dummy2"]
        },
        {
          name: "dummyMaxTokens",
          label: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤",
          type: "range",
          min: 0,
          max: 100,
          step: 1
        },
        {
          name: "dummyTemperature",
          label: "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (—É—Ä–∞-—É—Ä–∞)",
          type: "range",
          min: 0,
          max: 100,
          step: 0.1
        }
      ]
    }),

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –¥—Ä–∞–π–≤–µ—Ä–∞ "–∑–∞–≥–ª—É—à–∫–∞"
     * @namespace Drivers.Dummy.sendRequest
     */
    async sendRequest(request: DriverRequest): Promise<DriverResponse> {
      logger.info("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞", { request })

      await new Promise(resolve => setTimeout(resolve, 1000))

      const content = request.messages
        .map(message => {
          return `${message.role}: ${message.content}`
        })
        .join("\n")

      const response = {
        providerRequestId: "dummy",
        content,
        requestParams: request,
        responseData: {
          request,
          config
        },
        requestTokens: 0,
        responseTokens: 0
      }

      logger.info("üöÄ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç", response)

      return response
    }
  }

  logger.info("–î—Ä–∞–π–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

  return driver
}
